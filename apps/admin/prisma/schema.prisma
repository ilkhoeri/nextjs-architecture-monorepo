generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEVELOPER
  SUPERADMIN
  ADMIN
  USER
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  BANNED
}

model User {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  /* Reference ID/External ID/Public ID (id yang di ekspose, untuk melindungi id asli) */
  refId                  String            @unique
  username               String            @unique
  firstName              String
  lastName               String?           @default("")

  name                   String            // dibutuhkan ketika menggunakan provider (eg, Google, Github) / jika tidak = firstName + lastName
  email                  String            @unique
  emailVerified          DateTime?
  password               String?           // opsional for auth provider
  image                  String?
  banner                 String?
  phone                  String?

  about                  About?            @relation("AboutUser")
  address                Address?          @relation("UserAddress")

  lastOnline             DateTime?
  lastSeen               DateTime?

  isTwoFactorEnabled     Boolean           @default(false)
  role                   UserRole          @default(USER)
  status                 AccountStatus     @default(ACTIVE)
  twoFactorConfirmation  TwoFactorConfirmation?
  accounts               Account[]

  likeIds                String[]
  favoriteIds            String[]
  saveIds                String[]
  links                  Link[]            @relation("UserLinks")
  orders                 Order[]           @relation("UserOrders")
}

model About {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String?           @db.ObjectId
  user                   User?             @relation("AboutUser", fields: [userId], references: [id], onDelete: Cascade)
  birthDay               DateTime?
  birthPlace             String?
  bio                    String?
  resume                 String?
  nationalId             String?           // Nomor KTP / SIM
  taxId                  String?           // NPWP
  gender                 String?
  notes                  String[]
  identifiers            Json?
  @@unique([userId])
}

model Account {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String            @db.ObjectId
  user                   User              @relation( fields: [userId], references: [id], onDelete: Cascade)
  type                   String            // 'oauth', 'credentials'
  provider               String            // 'google', 'github', 'apple', ...
  providerAccountId      String
  refresh_token          String?           @db.String
  access_token           String?           @db.String
  expires_at             Int?
  token_type             String?
  scope                  String?
  id_token               String?           @db.String
  session_state          String?

  // @@unique([userId]) // Constraint unik pada userId = mengizinkan satu user hanya satu Account
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  email                  String
  token                  String            @unique
  expires                DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  email                  String
  token                  String            @unique
  expires                DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  email                  String
  token                  String            @unique
  expires                DateTime
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String            @db.ObjectId
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Address {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  userId                 String?           @unique @db.ObjectId
  user                   User?             @relation("UserAddress", fields: [userId], references: [id], onDelete: Cascade)
  country                String?           // negara
  state                  String?           // provinsi/Negara Bagian
  postalcode             String?           // kode pos
  street                 String?           // jalan
  city                   String?           // kota
  regency                String?           // kabupaten
  district               String?           // kecamatan
  subdistrict            String?           // kelurahan
  village                String?           // desa
  notes                  String[]
}

model Link {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  name                   String
  url                    String            @unique
  imageUrl               String?
  userId                 String?           @db.ObjectId
  user                   User?             @relation("UserLinks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  description            String
  price                  String
  quantity               Int
  isNew                  Boolean           @default(false)
  isFeatured             Boolean           @default(false)
  isArchived             Boolean           @default(false)
  categoryId             String            @db.ObjectId
  category               Category?         @relation("CategoryToProduct", fields: [categoryId], references: [id])
  images                 Image[]
  orderItems             OrderItem[]
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  @@index([categoryId])
}

model Image {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  productId              String            @db.ObjectId
  product                Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  url                    String            // URL of the image
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  @@index([productId])
}

model Order {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String?           @db.ObjectId
  user                   User?             @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  orderItems             OrderItem[]
  isPaid                 Boolean           @default(false)
  phone                  String            @default("")
  address                String            @default("")
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  @@index([userId])
}

model OrderItem {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  orderId                String            @db.ObjectId
  order                  Order             @relation(fields: [orderId], references: [id])
  productId              String            @db.ObjectId
  product                Product           @relation(fields: [productId], references: [id])
  quantity               Int               // Properti quantity, represents the number of items checkout

  @@index([orderId])
  @@index([productId])
}

model Billboard {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  label                  String
  imageUrl               String
  categories             Category[]
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model Category {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  billboardId            String            @db.ObjectId
  billboard              Billboard         @relation(fields: [billboardId], references: [id])
  name                   String
  imageUrl               String
  products               Product[]         @relation("CategoryToProduct")
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  @@index([billboardId])
}
